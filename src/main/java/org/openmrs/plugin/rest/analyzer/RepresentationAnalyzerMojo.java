package org.openmrs.plugin.rest.analyzer;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;
import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.charset.StandardCharsets;

/**
 * Maven plugin that analyzes OpenMRS REST resource representations at build time.
 * 
 * Uses a two-phase approach:
 * 1. Runs a JUnit test with full OpenMRS context to analyze resources
 * 2. Processes the analysis results and generates output
 * 
 * Phase 1 Implementation: Basic plugin structure
 */
@Mojo(name = "analyze-representations", 
      defaultPhase = LifecyclePhase.PROCESS_CLASSES,
      requiresDependencyResolution = ResolutionScope.TEST)
public class RepresentationAnalyzerMojo extends AbstractMojo {

    @Parameter(defaultValue = "${project}", required = true, readonly = true)
    private MavenProject project;

    @Parameter(defaultValue = "${project.build.directory}/representation-analysis", property = "outputDirectory")
    private String outputDirectory;

    @Parameter(defaultValue = "representation-analysis.json", property = "outputFile")
    private String outputFile;

    @Parameter(defaultValue = "true", property = "generateReport")
    private boolean generateReport;

    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
        
        getLog().info("=== OpenMRS REST Representation Analyzer ===");
        getLog().info("Project: " + project.getName());
        getLog().info("Output directory: " + outputDirectory);
        getLog().info("Output file: " + outputFile);
        
        // Ensure output directory exists
        File outputDir = new File(outputDirectory);
        if (!outputDir.exists()) {
            outputDir.mkdirs();
            getLog().debug("Created output directory: " + outputDir.getAbsolutePath());
        }
        
        try {
            // Phase 2: Run the JUnit 4 test programmatically
            getLog().info("Phase 2: Running representation analysis test...");
            
            JUnitCore junit = new JUnitCore();
            
            // Load the test class dynamically to avoid compile-time dependency
            Class<?> testClass;
            try {
                testClass = Class.forName("org.openmrs.plugin.rest.analyzer.test.RestContextTest");
            } catch (ClassNotFoundException e) {
                throw new MojoExecutionException("Test class not found. Ensure test dependencies are available.", e);
            }
            
            Result result = junit.run(testClass);
            
            getLog().info("Test execution completed in " + result.getRunTime() + "ms");
            
            if (result.getFailureCount() > 0) {
                getLog().error("Test execution failed:");
                for (Failure failure : result.getFailures()) {
                    getLog().error("  - " + failure.getMessage());
                    getLog().debug("    " + failure.getTrace());
                }
                throw new MojoExecutionException("Representation analysis test failed");
            }
            
            getLog().info("Test completed successfully");
            
            // Phase 3: TODO - Process analysis results
            processAnalysisResults();
            
            getLog().info("Representation analysis completed successfully");
            
        } catch (Exception e) {
            getLog().error("Representation analysis failed: " + e.getMessage(), e);
            throw new MojoExecutionException("Failed to analyze representations", e);
        }
    }
    
    /**
     * Phase 3: Process the analysis results generated by the test.
     * For now, just verify the file exists and show basic info.
     */
    private void processAnalysisResults() throws MojoExecutionException {
        try {
            // Check if the test generated the analysis file
            File analysisFile = new File("target/representation-analysis.json");
            
            if (!analysisFile.exists()) {
                throw new MojoExecutionException("Analysis output file not found: " + analysisFile.getAbsolutePath());
            }
            
            String analysisContent = new String(Files.readAllBytes(analysisFile.toPath()), StandardCharsets.UTF_8);
            
            getLog().info("=== Analysis Results Summary ===");
            getLog().info("Analysis file: " + analysisFile.getAbsolutePath());
            getLog().info("File size: " + analysisFile.length() + " bytes");
            
            // Phase 2: Basic processing - just count resources
            if (analysisContent.contains("resourceCount")) {
                // Simple regex to extract resource count
                java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("\"resourceCount\"\\s*:\\s*(\\d+)");
                java.util.regex.Matcher matcher = pattern.matcher(analysisContent);
                if (matcher.find()) {
                    String resourceCount = matcher.group(1);
                    getLog().info("Resources analyzed: " + resourceCount);
                }
            }
            
            // Copy to final output location
            File finalOutputFile = new File(outputDirectory, outputFile);
            Files.copy(analysisFile.toPath(), finalOutputFile.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
            
            getLog().info("Final output: " + finalOutputFile.getAbsolutePath());
            getLog().info("==============================");
            
        } catch (IOException e) {
            throw new MojoExecutionException("Failed to process analysis results", e);
        }
    }
}
